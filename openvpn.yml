---
- hosts: privateVPN
  gather_facts: False
  vars:
    ca_name: unused
    crypto_curve: secp521r1
  tasks:
    - name: Create installurl with repos
      raw: echo "http://mirror.switch.ch/ftp/pub/OpenBSD" > /etc/installurl
      tags:
        - update_installurl
        - basesystem_config
    - name: Install python needed by ansible
      raw: pkg_add python-2.7.13p0
      tags:
        - basesystem_config
        - install_python
    - name: Link python2.7 as default
      raw: ln -s /usr/local/bin/python2.7 /usr/bin/python
      ignore_errors: yes
    - name: Update OpenBSD base system (can take lot of time)
      shell: syspatch
      register: bsd_updated
      tags:
        - update_bsd
    - name: Remove unessesery software
      openbsd_pkg: name=opensmtpd state=absent
      tags:
        - remove_packages
    - name: Disable and Stop services
      shell: rcctl disable {{ item }} ; rcctl stop {{ item }}
      with_items:
        - smtpd
        - sndiod
      tags:
        - disable_services
    - name: Detect interface name
      shell: basename /etc/hostname.*|cut -d. -f2
      register: ifname
      tags:
        - install_packages
        - detect_iface
        - is_aws
      # Assume, possibly wrong... that xnf0 is AWS specyfic as xnf0 is xen ifname,
    - name: Install dhcpcd only on AWS (xnf0) instance
      openbsd_pkg: name=dhcpcd state=present
      when: ifname.stdout == "xnf0"
      tags:
        - install_packages
        - detect_iface
    - name: Use dhcpcd only for IPv6
      shell: echo -e "ipv6only\nnohook resolv.conf" >> /etc/dhcpcd.conf
      when: ifname.stdout == "xnf0"
      tags:
        - install_packages
        - basesystem_config
        - detect_iface
    - name: Enable dhcpcd
      shell: rcctl enable dhcpcd
      when: ifname.stdout == "xnf0"
      tags:
        - install_packages
        - basesystem_config
        - detect_iface
    - name: Rebooting machine after updates
      shell: sleep 2 && shutdown -r now "Ansible updates triggered"
      async: 1
      poll: 0
      ignore_errors: true
      when: bsd_updated.changed
    - name: Waiting for machine to get back (this make take some time...)
      local_action: wait_for host={{ ansible_ssh_host }} port=22 state=started delay=120 timeout=120
      become: false
      when: bsd_updated.changed
    - name: Install required packages
      openbsd_pkg: name={{ item }} state=present
      with_items:
        - easy-rsa-3.0.1
        - isc-bind-9.10.4pl6-geoip
        - openvpn-2.4.1
        - git-2.12.2
        - py-pip
        - bash
        - apg-2.2.3p0
        - libyaml-0.1.7
      tags:
        - install_packages
        - basesystem_config
    - name: Download obfsproxy
      git: repo=https://git.torproject.org/pluggable-transports/obfsproxy.git force=yes
        dest=/usr/src/obfsproxy
        accept_hostkey=True
      tags:
        - install_obfs
        - upgrade_obfs
    - name: Install obfsproxy
      shell: chdir=/usr/src/obfsproxy/ {{ item }}
      with_items:
        - pip2.7 install --upgrade  constantly
        - python2.7 setup.py install
      tags:
        - install_obfs
        - upgrade_obfs
    - name: Create some dirs
      file: path={{ item.dir }} owner={{ item.owner }} group={{ item.group }} state=directory
      with_items:
        - { dir: /etc/openvpn, owner: root, group: wheel }
        - { dir: /etc/openvpn/export, owner: root, group: wheel }
        - { dir: /etc/openvpn/jail, owner: root, group: wheel }
        - { dir: /etc/openvpn/jail/ccd, owner: root, group: wheel }
        - { dir: /etc/openvpn/jail/tmp, owner: root, group: wheel }
        - { dir: /etc/openvpn/status, owner: root, group: wheel }
        - { dir: /var/named/var/cache/bind, owner: _bind, group: _bind }
        - { dir: /etc/openvpn/export/archives, owner: root, group: wheel }
        - { dir: /etc/openvpn/export/privateVPN-Desktop.visc, owner: root, group: wheel }
      tags:
        - create_dirs
        - basesystem_config
    - name: Symlink bash (yes i like bash)
      file: state=link src=/usr/local/bin/bash dest=/bin/bash force=yes
    - name: Symlink easy-rsa
      file: state=link src=/usr/local/share/easy-rsa dest=/etc/openvpn/easy-rsa force=yes
    - name: Copy config files
      copy: src=files/{{ item.src }} dest={{ item.dst}} owner={{ item.owner }} group={{ item.group }} mode={{ item.mode }} #mode="u+rwx,go-w"
      with_items:
        - { src: privateVPN-Desktop.conf, dst: /etc/openvpn/privateVPN-Desktop.conf, owner: root, group: wheel, mode: "u+rw,go-rw" }
        - { src: privateVPN-Mobile.conf, dst: /etc/openvpn/privateVPN-Mobile.conf, owner: root, group: wheel, mode: "u+rw,go-rw" }
        - { src: named.conf, dst: /var/named/etc/named.conf, owner: root, group: _bind, mode: "u+rw,go-rw" }
        - { src: openvpn.init, dst: /etc/rc.d/openvpn, owner: root, group: wheel, mode: "ugo+x,go-w" }
        - { src: obfs.init, dst: /etc/rc.d/obfs, owner: root, group: wheel, mode: "ugo+x,go-w" }
        - { src: rc.conf.local, dst: /etc/rc.conf.local, owner: root, group: wheel, mode: "u+rw,go+r" }
        - { src: gen_config.sh, dst: /etc/openvpn/export, owner: root, group: wheel, mode: "u+rwx,go-rwx" }
        - { src: privateVPN-Desktop.visc/config.conf, dst: /etc/openvpn/export/privateVPN-Desktop.visc/config.conf, owner: root, group: wheel, mode: "u+rwx,go-rwx" }
        - { src: privateVPN-Mobile.ovpn.template, dst: /etc/openvpn/export/privateVPN-Mobile.ovpn.template, owner: root, group: wheel, mode: "u+rwx,go-rwx" }
      tags:
        - copy_configs
        - basesystem_config
    - name: Generate pf config file
      template: src=files/pf.j2 dest=/etc/pf.conf owner=root group=wheel
      tags:
        - copy_configs
    - name: Update listening IP - Others
      shell: ifconfig {{ ifname.stdout }}|grep inet|grep -v inet6|awk '{ print $2}'|xargs -I xxx sed -i 's/[[:<:]]LISTEN_IP[[:>:]]/xxx/g'
               /etc/openvpn/export/privateVPN-Desktop.visc/config.conf
               /etc/openvpn/export/privateVPN-Mobile.ovpn.template
      when: ifname.stdout == "vio0"
      tags:
        - update_templates
        - copy_configs
    - name: Update listening IP - AWS
      shell: ftp -MVo - http://169.254.169.254/latest/meta-data/public-ipv4|xargs -I xxx sed -i 's/[[:<:]]LISTEN_IP[[:>:]]/xxx/g'
               /etc/openvpn/export/privateVPN-Desktop.visc/config.conf
               /etc/openvpn/export/privateVPN-Mobile.ovpn.template
      when: ifname.stdout == "xnf0"
      tags:
        - update_templates
        - copy_configs
    - name: Let's do some sed's on the template files
      shell: "{{ item }}"
      with_items:
        - ifconfig {{ ifname.stdout }} | grep inet | grep -v inet6 | awk '{ print $2}' | xargs -I xxx sed -i 's/[[:<:]]LISTEN_IP[[:>:]]/xxx/g'
            /etc/rc.d/obfs
            /etc/openvpn/privateVPN-Mobile.conf
            /etc/pf.conf
        - apg -a 1 -m 32 -MC -n1 | xargs -I xxx sed -i s/SCRAMBLE_SECRET/xxx/g /etc/rc.d/obfs /etc/openvpn/export/privateVPN-Desktop.visc/config.conf
        - hostname | xargs -I xxx sed -i s/SERVER_CERT/PrivateVPN-xxx_ECC/g /etc/openvpn/privateVPN-Desktop.conf
        - hostname | xargs -I xxx sed -i s/SERVER_CERT/PrivateVPN-xxx_RSA/g /etc/openvpn/privateVPN-Mobile.conf
      tags:
        - update_templates
        - copy_configs
    - name: Add OBFSproxy user
      user: name=obfs home=/home/obfs shell=/bin/bash
      tags:
        - create_obfs_user
      # Have better idea? Create pull request...
    - name: Detect if IPv6 is up on {{ ifname.stdout }}
      shell: ifconfig {{ ifname.stdout }}|sed -n '/inet6/p'|grep -v "inet6 fe80:"|wc -l|sed -e 's/^[ \t]*//'
      register: ipv6is
      tags:
        - reload_pf
    - name: Get IPv6 address
      shell: ifconfig {{ ifname.stdout }}|grep inet6|egrep -v -e "inet6 fe80:" -e autoconfprivacy|awk '{ print $2}'
      register: ipv6addr
      when: ipv6is.stdout != "0"
      tags:
        - reload_pf
    - name: If IPv6 is present add additional rules to pf and place IPv6 address
      shell: "{{ item }}"
      with_items:
        - echo "pass out on {{ ifname.stdout }} from fdd5:b0c4:f9fb:fa1f::/64 to any nat-to \$ext_ip_6\npass out on {{ ifname.stdout }} from fdd5:b0c4:f9fb:fa1e::/64 to any nat-to \$ext_ip_6" >> /etc/pf.conf
        - sed -i s/LISTEN_IPv6/{{ ipv6addr.stdout }}/g /etc/pf.conf
      when: ipv6is.stdout != "0"
      tags:
        - reload_pf
    - name: Reload pf
      command: pfctl -f /etc/pf.conf
      tags:
        - reload_pf
    - name: Easy-RSA - Initialize and Generate PKI/CA/Server Certificate for ECC and RSA
      shell: chdir=/etc/openvpn/easy-rsa/ {{ item }}
      with_items:
        - ./easyrsa init-pki
        - ./easyrsa gen-dh
        - apg -a 1 -m 6 -MCL -n1 | xargs -I xxx ./easyrsa --batch --req-cn="privateVPN CA (xxx)" --use-algo=ec --curve={{ crypto_curve }} build-ca nopass
        - hostname | xargs -I xxx ./easyrsa --use-algo=ec --curve={{ crypto_curve }} build-server-full "PrivateVPN-xxx_ECC" nopass
        - hostname | xargs -I xxx ./easyrsa --use-algo=rsa --ns-cert=yes  build-server-full "PrivateVPN-xxx_RSA" nopass
      tags:
        - create_pki
    # We use ECC for Desktop connections and RSA for Mobile clients as ECC is not yet supported
    # It is important to have always name "Mobile" or "Desktop" in Subject field
    # By default I use secp521r1 which perhaps is overkill, feel free to change to some less intensive curve
    - name: Create one sample set of Client certificates for Mobile(RSA) and Desktop(ECC)
      shell: chdir=/etc/openvpn/easy-rsa/ {{ item }}
      with_items:
        - ./easyrsa --use-algo=rsa build-client-full privateVPN-Mobile-JohnDoe nopass
        - ./easyrsa --use-algo=ec --curve={{ crypto_curve }} build-client-full privateVPN-Desktop-JohnDoe nopass
      tags:
        - gen_client_certs
    - name: Create shared-secret for TLSauth(RSA) and TLScrypt(ECC)
      shell: openvpn --genkey --secret /etc/openvpn/easy-rsa/pki/ta.key
      tags:
        - gen_ta
    - name: Generate CRL
      shell: cd /etc/openvpn/easy-rsa/; ./easyrsa gen-crl ; cp pki/crl.pem /etc/openvpn/jail/crl.pem
      tags:
        - update_crl
    - name: Fix CRL permissions so jailed openvpn can read content
      file: path=/etc/openvpn/jail/crl.pem mode=0644
      tags:
        - update_crl
    - name: Generate SHA256 from CA certificate
      shell: openssl x509 -in /etc/openvpn/easy-rsa/pki/ca.crt -noout -sha256 -fingerprint|cut -d= -f2
      register: ca_sha2
      tags:
        - get_ca_sha2
        - update_ca_hash
    - name: Generate SHA1 from CA certificate
      shell: openssl x509 -in /etc/openvpn/easy-rsa/pki/ca.crt -noout -sha1 -fingerprint|cut -d= -f2
      register: ca_sha1
      tags:
        - get_ca_sha1
        - update_ca_hash
    - name: Put SHA256 and SHA1 into client configurations
      shell: "{{ item }}"
      with_items:
        - sed -i s/CA_HASH/{{ ca_sha2.stdout }}/g /etc/openvpn/export/privateVPN-Desktop.visc/config.conf
        - sed -i s/CA_HASH/{{ ca_sha1.stdout }}/g /etc/openvpn/export/privateVPN-Mobile.ovpn.template
      tags:
        - update_ca_hash
    # I do not care for other entries in sysctl.conf as we do it for this playbook purpose, feel free to make it better ;)
    - name: Enable forwarding and make it permement
      shell: "{{ item }}"
      with_items:
        - echo "net.inet.ip.forwarding=1" > /etc/sysctl.conf
        - echo "net.inet6.ip6.forwarding=1" >> /etc/sysctl.conf
        - sysctl net.inet.ip.forwarding=1
        - sysctl net.inet6.ip6.forwarding=1
      tags:
        - enable_forwarding
    - name: Use localhost as primary DNS server, and Google as secondary
      shell: "{{ item }}"
      with_items:
        - echo "prepend domain-name-servers 127.0.0.1,8.8.8.8,8.8.4.4 ;" > /etc/dhclient.conf ;
        - echo "nameserver 127.0.0.1" > /etc/resolv.conf
        - pgrep dhclient | while read dhcpds ; do kill -HUP $dhcpds; done
      tags:
        - update_resolvconf
    # ToDO: fix BSD init services to make it compatibile properly
    - name: Enable services ans start them
      shell: rcctl {{ item }}
      with_items:
        - enable obfs
        - start obfs
        - enable openvpn
        - start openvpn
        - enable isc_named
        - start isc_named
      tags:
        - enable_services
    - name: Pack Client Configs (one for iPhone OpenVPN and second for Viscosity Desktop VPN)
      shell: chdir=/etc/openvpn/export/ {{ item }}
      with_items:
        - ./gen_config.sh privateVPN-Desktop-JohnDoe
        - ./gen_config.sh privateVPN-Mobile-JohnDoe
      tags:
        - gen_package_vpn
